1
Какой системный вызов делает команда cd? В прошлом ДЗ мы выяснили, что cd не является самостоятельной программой, это shell builtin, поэтому запустить strace непосредственно на cd не получится. Тем не менее, вы можете запустить strace на /bin/bash -c 'cd /tmp'. В этом случае вы увидите полный список системных вызовов, которые делает сам bash при старте. Вам нужно найти тот единственный, который относится именно к cd. Обратите внимание, что strace выдаёт результат своей работы в поток stderr, а не в stdout.

Используется - chdir

2
Попробуйте использовать команду file на объекты разных типов на файловой системе. Например:
vagrant@netology1:~$ file /dev/tty
/dev/tty: character special (5/0)
vagrant@netology1:~$ file /dev/sda
/dev/sda: block special (8/0)
vagrant@netology1:~$ file /bin/bash
/bin/bash: ELF 64-bit LSB shared object, x86-64
Используя strace выясните, где находится база данных file на основании которой она делает свои догадки.

openat(AT_FDCWD, "/usr/share/misc/magic.mgc", O_RDONLY) = 3
fstat(3, {st_mode=S_IFREG|0644, st_size=5811536, ...}) = 0
mmap(NULL, 5811536, PROT_READ|PROT_WRITE, MAP_PRIVATE, 3, 0) = 0x7fa33779e000
close(3)

Возможно это так же поможет ответу 
ldd $(which file) |grep lib

Все задействованные библиотеки ведут в директорию - /lib/x86_64-linux-gnu


3)
Предположим, приложение пишет лог в текстовый файл. Этот файл оказался удален (deleted в lsof), однако возможности сигналом сказать приложению переоткрыть файлы или просто перезапустить приложение – нет. Так как приложение продолжает писать в удаленный файл, место на диске постепенно заканчивается. Основываясь на знаниях о перенаправлении потоков предложите способ обнуления открытого удаленного файла (чтобы освободить место на файловой системе.

lsof -p номер пида | grep deleted
Ищим путь ко которому программа побращается к файлу с логами. Пробуем открыть файл и пересохранить, после убиваем процесс. Проверяем размер файла.


4)
Занимают ли зомби-процессы какие-то ресурсы в ОС (CPU, RAM, IO)?

Зомби не потребляют никаких ресурсов, память и файловые дескрипторы таких процессов уже освобождены. Остается только запись в таблице процессов, которая занимает несколько десятков байт памяти. Так что единичный зомби процесс на систему никак не влияет. НО он явный индикатор того, что у какого то процесса в системе что то пошло не так.

Поиск зомби:

ps -axho state,pid,ppid | grep Z | sed 's/./ps/' | sh



5) В iovisor BCC есть утилита opensnoop:
root@vagrant:~# dpkg -L bpfcc-tools | grep sbin/opensnoop
/usr/sbin/opensnoop-bpfcc
На какие файлы вы увидели вызовы группы open за первую секунду работы утилиты? Воспользуйтесь пакетом bpfcc-tools для Ubuntu 20.04. Дополнительные сведения по установке.

vagrant@vagrant:~$ sudo /usr/sbin/opensnoop-bpfcc
PID    COMM               FD ERR PATH
384    systemd-udevd      14   0 /sys/fs/cgroup/unified/system.slice/systemd-udevd.service/cgroup.procs
384    systemd-udevd      14   0 /sys/fs/cgroup/unified/system.slice/systemd-udevd.service/cgroup.threads
879    vminfo              5   0 /var/run/utmp
630    dbus-daemon        -1   2 /usr/local/share/dbus-1/system-services
630    dbus-daemon        18   0 /usr/share/dbus-1/system-services
630    dbus-daemon        -1   2 /lib/dbus-1/system-services
630    dbus-daemon        18   0 /var/lib/snapd/dbus-1/system-services/
879    vminfo              5   0 /var/run/utmp
630    dbus-daemon        -1   2 /usr/local/share/dbus-1/system-services
630    dbus-daemon        18   0 /usr/share/dbus-1/system-services
630    dbus-daemon        -1   2 /lib/dbus-1/system-services
630    dbus-daemon        18   0 /var/lib/snapd/dbus-1/system-services/
879    vminfo              5   0 /var/run/utmp
630    dbus-daemon        -1   2 /usr/local/share/dbus-1/system-services
630    dbus-daemon        18   0 /usr/share/dbus-1/system-services
630    dbus-daemon        -1   2 /lib/dbus-1/system-services
630    dbus-daemon        18   0 /var/lib/snapd/dbus-1/system-services/
879    vminfo              5   0 /var/run/utmp


6
Какой системный вызов использует uname -a? Приведите цитату из man по этому системному вызову, где описывается альтернативное местоположение в /proc, где можно узнать версию ядра и релиз ОС.

Part of the utsname information is also accessible  via  /proc/sys/ker‐
       nel/{ostype, hostname, osrelease, version, domainname}.


7
Чем отличается последовательность команд через ; и через && в bash? Например:
root@netology1:~# test -d /tmp/some_dir; echo Hi
Hi
root@netology1:~# test -d /tmp/some_dir && echo Hi
root@netology1:~#
Есть ли смысл использовать в bash &&, если применить set -e?

; Позволяет записывать две и более команд в одной строке (конвеер)
&& Логическая операция И если условие не TRUE то действие выполнено не будет.

параметр -e указывает оболочке выйти, если команда дает ненулевой статус выхода. Оболочка завершает работу при сбое команды. 
В данном задании при ; команда отрабатывает корректно, но без излишков логичности. При добавлении логичности с && команда не отрабатывает, т.к. условия не корректны, и Hi не появляется. При добавлении set -e последняя команда отрабатывается игнорируя преведущие условия.

8
Из каких опций состоит режим bash set -euxo pipefail и почему его хорошо было бы использовать в сценариях?

set - e - прекращает выполнение скрипта если команда завершилась ошибкой, выводит в stderr строку с ошибкой. Обойти эту проверку можно добавив в пайплайн к команде true: mycommand | true.
set - u - прекращает выполнение скрипта, если встретилась несуществующая переменная.
set - x - выводит выполняемые команды в stdout перед выполненинем.
set - o pipefail - set -o pipefail - прекращает выполнение скрипта, даже если одна из частей пайпа завершилась ошибкой. В этом случае bash-скрипт завершит выполнение, если mycommand вернёт ошибку, не смотря на true в конце пайплайна: mycommand | true.

-euxo pipefail позволяет писать более чистый скрипт. Выполяется процес самотестирования уже в первых строках скрипта. Можно более детально увидеть в какой части скрипта проблема (переменная, ошибка, синтаксис). 

9
Используя -o stat для ps, определите, какой наиболее часто встречающийся статус у процессов в системе. В man ps ознакомьтесь (/PROCESS STATE CODES) что значат дополнительные к основной заглавной буквы статуса процессов. Его можно не учитывать при расчете (считать S, Ss или Ssl равнозначными).

S STATE CODES
       Here are the different values that the s, stat and state output specifiers (header "STAT" or "S") will display to describe the state of a
       process:

               D    uninterruptible sleep (usually IO)
               I    Idle kernel thread
               R    running or runnable (on run queue)
               S    interruptible sleep (waiting for an event to complete)
               T    stopped by job control signal
               t    stopped by debugger during the tracing
               W    paging (not valid since the 2.6.xx kernel)
               X    dead (should never be seen)
               Z    defunct ("zombie") process, terminated but not reaped by its parent
			   
Самые основные - running ready sleeping, waiting
